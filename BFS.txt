#include <stdio.h>

int q[20],front=-1,rear=-1;
struct node
{
  int col,dist,par;
};

int isempty(int q[])
{
  if(front==-1)
  return 1;
  else 
  return 0;
}

void enqueue(int q[],int k)
{
  if(front==-1)
  {
    front++;
    rear++;
    q[rear]=k;
  }
  else
  {
    if((rear+1)%20==front)
    printf("Queue overflow");
    else
    {
      rear=(rear+1)%20;
      q[rear]=k;
    }
  }
}

int dequeue(int q[])
{
  if(front==-1)
  {
    printf("Queue underflow");
    return -1;
  }
  else
  {
    if(front==rear)
    {
      int t=q[front];
      front=-1;
      rear=-1;
      return t;
    }
    else{
      int t= q[front];
      front=(front+1)%20;
      return t;
    }
  }
}

void bfs(int g[10][10],struct node *v, int start)
{
  int i,j,k;
  for(i=0;i<10;i++)
  {
    if(i!=start)
    {
      v[i].col=0;
      v[i].dist= 355555;
      v[i].par=-1;
    }
  }
  v[start].col=1;
  v[start].dist=0;
  v[start].par=-1;
  enqueue(q,start);
  while(!isempty(q))
  {
    int u=dequeue(q);
    for(i=0;i<10;i++)
    {
      if(i!=u)
      {
        if(g[u][i]==1 && v[i].col==0)
        {
          v[i].col=1;
          v[i].dist=v[u].dist+1;
          v[i].par=u;
          enqueue(q,i);
        }
      }
    }
    v[u].col=2;
  }
}

int main(void) 
{
  int i,j,g[10][10]={0};
  int node;
  printf("What is the start node: ");
  scanf("%d",&node);
  struct node v[10]={0};
  for(i=0; i<10; i++)
  for(j=0; j<10; j++)
  scanf("%d",&g[i][j]);
  bfs(g,v,node);
  printf("Node\t\tDistance from source:%d\t\tParent node\n",node);
  for(i=0; i<10;i++)
  {
    printf("Node:%d\t\t\t\t%d\t\t\t\t\t%d\n",i,v[i].dist,v[i].par);
  }
  return 0;
}